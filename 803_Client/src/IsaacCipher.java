/* Class418 - Decompiled by JODE
 * Visit http://jode.sourceforge.net/
 */

public final class IsaacCipher
{
    int[] mem = new int[256];//anIntArray6020
    int b;//anInt6021
    static final int anInt6022 = 256;
    int count;//anInt6023
    int[] rsl = new int[256];//anIntArray6024
    static final int anInt6025 = 8;
    int a;//anInt6026
    static final int anInt6027 = 1020;
    int c;//anInt6028
    
    final void init/*method7496*/(int i) {
		int i_0_ = -1640531527;
		int i_1_ = -1640531527;
		int i_2_ = -1640531527;
		int i_3_ = -1640531527;
		int i_4_ = -1640531527;
		int i_5_ = -1640531527;
		int i_6_ = -1640531527;
		int i_7_ = -1640531527;
		for (int i_8_ = 0; i_8_ < 4; i_8_++) {
		    i_7_ ^= i_6_ << 11;
		    i_4_ += i_7_;
		    i_6_ += i_5_;
		    i_6_ ^= i_5_ >>> 2;
		    i_3_ += i_6_;
		    i_5_ += i_4_;
		    i_5_ ^= i_4_ << 8;
		    i_2_ += i_5_;
		    i_4_ += i_3_;
		    i_4_ ^= i_3_ >>> 16;
		    i_1_ += i_4_;
		    i_3_ += i_2_;
		    i_3_ ^= i_2_ << 10;
		    i_0_ += i_3_;
		    i_2_ += i_1_;
		    i_2_ ^= i_1_ >>> 4;
		    i_7_ += i_2_;
		    i_1_ += i_0_;
		    i_1_ ^= i_0_ << 8;
		    i_6_ += i_1_;
		    i_0_ += i_7_;
		    i_0_ ^= i_7_ >>> 9;
		    i_5_ += i_0_;
		    i_7_ += i_6_;
		}
		for (int i_9_ = 0; i_9_ < 256; i_9_ += 8) {
		    i_7_ += rsl[i_9_];
		    i_6_ += rsl[1 + i_9_];
		    i_5_ += rsl[i_9_ + 2];
		    i_4_ += rsl[i_9_ + 3];
		    i_3_ += rsl[i_9_ + 4];
		    i_2_ += rsl[5 + i_9_];
		    i_1_ += rsl[6 + i_9_];
		    i_0_ += rsl[7 + i_9_];
		    i_7_ ^= i_6_ << 11;
		    i_4_ += i_7_;
		    i_6_ += i_5_;
		    i_6_ ^= i_5_ >>> 2;
		    i_3_ += i_6_;
		    i_5_ += i_4_;
		    i_5_ ^= i_4_ << 8;
		    i_2_ += i_5_;
		    i_4_ += i_3_;
		    i_4_ ^= i_3_ >>> 16;
		    i_1_ += i_4_;
		    i_3_ += i_2_;
		    i_3_ ^= i_2_ << 10;
		    i_0_ += i_3_;
		    i_2_ += i_1_;
		    i_2_ ^= i_1_ >>> 4;
		    i_7_ += i_2_;
		    i_1_ += i_0_;
		    i_1_ ^= i_0_ << 8;
		    i_6_ += i_1_;
		    i_0_ += i_7_;
		    i_0_ ^= i_7_ >>> 9;
		    i_5_ += i_0_;
		    i_7_ += i_6_;
		    mem[i_9_] = i_7_;
		    mem[i_9_ + 1] = i_6_;
		    mem[i_9_ + 2] = i_5_;
		    mem[i_9_ + 3] = i_4_;
		    mem[4 + i_9_] = i_3_;
		    mem[5 + i_9_] = i_2_;
		    mem[6 + i_9_] = i_1_;
		    mem[7 + i_9_] = i_0_;
		}
		for (int i_10_ = 0; i_10_ < 256; i_10_ += 8) {
		    i_7_ += mem[i_10_];
		    i_6_ += mem[i_10_ + 1];
		    i_5_ += mem[i_10_ + 2];
		    i_4_ += mem[3 + i_10_];
		    i_3_ += mem[4 + i_10_];
		    i_2_ += mem[i_10_ + 5];
		    i_1_ += mem[6 + i_10_];
		    i_0_ += mem[7 + i_10_];
		    i_7_ ^= i_6_ << 11;
		    i_4_ += i_7_;
		    i_6_ += i_5_;
		    i_6_ ^= i_5_ >>> 2;
		    i_3_ += i_6_;
		    i_5_ += i_4_;
		    i_5_ ^= i_4_ << 8;
		    i_2_ += i_5_;
		    i_4_ += i_3_;
		    i_4_ ^= i_3_ >>> 16;
		    i_1_ += i_4_;
		    i_3_ += i_2_;
		    i_3_ ^= i_2_ << 10;
		    i_0_ += i_3_;
		    i_2_ += i_1_;
		    i_2_ ^= i_1_ >>> 4;
		    i_7_ += i_2_;
		    i_1_ += i_0_;
		    i_1_ ^= i_0_ << 8;
		    i_6_ += i_1_;
		    i_0_ += i_7_;
		    i_0_ ^= i_7_ >>> 9;
		    i_5_ += i_0_;
		    i_7_ += i_6_;
		    mem[i_10_] = i_7_;
		    mem[i_10_ + 1] = i_6_;
		    mem[2 + i_10_] = i_5_;
		    mem[i_10_ + 3] = i_4_;
		    mem[i_10_ + 4] = i_3_;
		    mem[i_10_ + 5] = i_2_;
		    mem[6 + i_10_] = i_1_;
		    mem[7 + i_10_] = i_0_;
		}
		isaac((byte) 16);
		count = -1459565312;
    }
    
    public final int method7497(byte i) {
		if (0 == count * -1798378491) {
		    isaac((byte) 59);
		    count = -1459565312;
		}
		if (!RS3Applet.USING_ISAAC) {
			return 0;
		}
		return rsl[(count -= -1683423027) * -1798378491];
    }
    
    public final int method7498() {
	if (0 == count * -1798378491) {
	    isaac((byte) 30);
	    count = -1459565312;
	}
	return (rsl
		[(count -= -1683423027) * -1798378491]);
    }
    
    final void isaac/*method7499*/(byte i) {
		b += (c += 576559343) * 680337901;
		for (int i_11_ = 0; i_11_ < 256; i_11_++) {
		    int i_12_ = mem[i_11_];
		    if ((i_11_ & 0x2) == 0) {
				if (0 == (i_11_ & 0x1)) {
				    a
					= (-1581437547
					   * (a * 686798269
					      ^ (686798269 * a
						 << 13)));
				} else {
				    a
					= ((a * 686798269
					    ^ 686798269 * a >>> 6)
					   * -1581437547);
				}
		    } else if ((i_11_ & 0x1) == 0) {
			a
			    = (-1581437547
			       * (686798269 * a
				  ^ a * 686798269 << 2));
		    } else
			a
			    = ((a * 686798269
				^ a * 686798269 >>> 16)
			       * -1581437547);
		    a
			+= (mem[128 + i_11_ & 0xff]
			    * -1581437547);
		    int i_13_;
		    mem[i_11_] = i_13_ = (mem[(i_12_ & 0x3fc) >> 2] + 686798269 * a + b * -1304688533);
		    rsl[i_11_] = (b = ((mem[(i_13_ >> 8 & 0x3fc) >> 2]) + i_12_) * 1962959939) * -1304688533;
		}
    }
    
    final void method7500() {
	int i = -1640531527;
	int i_14_ = -1640531527;
	int i_15_ = -1640531527;
	int i_16_ = -1640531527;
	int i_17_ = -1640531527;
	int i_18_ = -1640531527;
	int i_19_ = -1640531527;
	int i_20_ = -1640531527;
	for (int i_21_ = 0; i_21_ < 4; i_21_++) {
	    i_20_ ^= i_19_ << 11;
	    i_17_ += i_20_;
	    i_19_ += i_18_;
	    i_19_ ^= i_18_ >>> 2;
	    i_16_ += i_19_;
	    i_18_ += i_17_;
	    i_18_ ^= i_17_ << 8;
	    i_15_ += i_18_;
	    i_17_ += i_16_;
	    i_17_ ^= i_16_ >>> 16;
	    i_14_ += i_17_;
	    i_16_ += i_15_;
	    i_16_ ^= i_15_ << 10;
	    i += i_16_;
	    i_15_ += i_14_;
	    i_15_ ^= i_14_ >>> 4;
	    i_20_ += i_15_;
	    i_14_ += i;
	    i_14_ ^= i << 8;
	    i_19_ += i_14_;
	    i += i_20_;
	    i ^= i_20_ >>> 9;
	    i_18_ += i;
	    i_20_ += i_19_;
	}
	for (int i_22_ = 0; i_22_ < 256; i_22_ += 8) {
	    i_20_ += rsl[i_22_];
	    i_19_ += rsl[1 + i_22_];
	    i_18_ += rsl[i_22_ + 2];
	    i_17_ += rsl[i_22_ + 3];
	    i_16_ += rsl[i_22_ + 4];
	    i_15_ += rsl[5 + i_22_];
	    i_14_ += rsl[6 + i_22_];
	    i += rsl[7 + i_22_];
	    i_20_ ^= i_19_ << 11;
	    i_17_ += i_20_;
	    i_19_ += i_18_;
	    i_19_ ^= i_18_ >>> 2;
	    i_16_ += i_19_;
	    i_18_ += i_17_;
	    i_18_ ^= i_17_ << 8;
	    i_15_ += i_18_;
	    i_17_ += i_16_;
	    i_17_ ^= i_16_ >>> 16;
	    i_14_ += i_17_;
	    i_16_ += i_15_;
	    i_16_ ^= i_15_ << 10;
	    i += i_16_;
	    i_15_ += i_14_;
	    i_15_ ^= i_14_ >>> 4;
	    i_20_ += i_15_;
	    i_14_ += i;
	    i_14_ ^= i << 8;
	    i_19_ += i_14_;
	    i += i_20_;
	    i ^= i_20_ >>> 9;
	    i_18_ += i;
	    i_20_ += i_19_;
	    mem[i_22_] = i_20_;
	    mem[i_22_ + 1] = i_19_;
	    mem[i_22_ + 2] = i_18_;
	    mem[i_22_ + 3] = i_17_;
	    mem[4 + i_22_] = i_16_;
	    mem[5 + i_22_] = i_15_;
	    mem[6 + i_22_] = i_14_;
	    mem[7 + i_22_] = i;
	}
	for (int i_23_ = 0; i_23_ < 256; i_23_ += 8) {
	    i_20_ += mem[i_23_];
	    i_19_ += mem[i_23_ + 1];
	    i_18_ += mem[i_23_ + 2];
	    i_17_ += mem[3 + i_23_];
	    i_16_ += mem[4 + i_23_];
	    i_15_ += mem[i_23_ + 5];
	    i_14_ += mem[6 + i_23_];
	    i += mem[7 + i_23_];
	    i_20_ ^= i_19_ << 11;
	    i_17_ += i_20_;
	    i_19_ += i_18_;
	    i_19_ ^= i_18_ >>> 2;
	    i_16_ += i_19_;
	    i_18_ += i_17_;
	    i_18_ ^= i_17_ << 8;
	    i_15_ += i_18_;
	    i_17_ += i_16_;
	    i_17_ ^= i_16_ >>> 16;
	    i_14_ += i_17_;
	    i_16_ += i_15_;
	    i_16_ ^= i_15_ << 10;
	    i += i_16_;
	    i_15_ += i_14_;
	    i_15_ ^= i_14_ >>> 4;
	    i_20_ += i_15_;
	    i_14_ += i;
	    i_14_ ^= i << 8;
	    i_19_ += i_14_;
	    i += i_20_;
	    i ^= i_20_ >>> 9;
	    i_18_ += i;
	    i_20_ += i_19_;
	    mem[i_23_] = i_20_;
	    mem[i_23_ + 1] = i_19_;
	    mem[2 + i_23_] = i_18_;
	    mem[i_23_ + 3] = i_17_;
	    mem[i_23_ + 4] = i_16_;
	    mem[i_23_ + 5] = i_15_;
	    mem[6 + i_23_] = i_14_;
	    mem[7 + i_23_] = i;
	}
	isaac((byte) 5);
	count = -1459565312;
    }
    
    public final int method7501() {
	if (-1798378491 * count == 0) {
	    isaac((byte) 47);
	    count = -1459565312;
	}
	return (rsl
		[count * -1798378491 - 1]);
    }
    
    public final int method7502() {
	if (0 == count * -1798378491) {
	    isaac((byte) 114);
	    count = -1459565312;
	}
	return (rsl
		[(count -= -1683423027) * -1798378491]);
    }
    
    public final int method7503() {
	if (-1798378491 * count == 0) {
	    isaac((byte) 57);
	    count = -1459565312;
	}
	return (rsl
		[count * -1798378491 - 1]);
    }
    
    public IsaacCipher(int[] seed) {
		for (int i = 0; i < seed.length; i++) {
		    rsl[i] = seed[i];
		}
		init(2049496869);
    }
    
    final void method7504() {
	b
	    += (c += 576559343) * 680337901;
	for (int i = 0; i < 256; i++) {
	    int i_24_ = mem[i];
	    if ((i & 0x2) == 0) {
		if (0 == (i & 0x1))
		    a
			= (-1581437547
			   * (a * 686798269
			      ^ (686798269 * a
				 << 13)));
		else
		    a
			= ((a * 686798269
			    ^ 686798269 * a >>> 6)
			   * -1581437547);
	    } else if ((i & 0x1) == 0)
		a
		    = (-1581437547
		       * (686798269 * a
			  ^ a * 686798269 << 2));
	    else
		a
		    = ((a * 686798269
			^ a * 686798269 >>> 16)
		       * -1581437547);
	    a
		+= (mem[128 + i & 0xff]
		    * -1581437547);
	    int i_25_;
	    mem[i] = i_25_
		= (mem[(i_24_ & 0x3fc) >> 2]
		   + 686798269 * a
		   + b * -1304688533);
	    rsl[i]
		= (b
		   = ((mem
		       [(i_25_ >> 8 & 0x3fc) >> 2])
		      + i_24_) * 1962959939) * -1304688533;
	}
    }
    
    final void method7505() {
	int i = -1640531527;
	int i_26_ = -1640531527;
	int i_27_ = -1640531527;
	int i_28_ = -1640531527;
	int i_29_ = -1640531527;
	int i_30_ = -1640531527;
	int i_31_ = -1640531527;
	int i_32_ = -1640531527;
	for (int i_33_ = 0; i_33_ < 4; i_33_++) {
	    i_32_ ^= i_31_ << 11;
	    i_29_ += i_32_;
	    i_31_ += i_30_;
	    i_31_ ^= i_30_ >>> 2;
	    i_28_ += i_31_;
	    i_30_ += i_29_;
	    i_30_ ^= i_29_ << 8;
	    i_27_ += i_30_;
	    i_29_ += i_28_;
	    i_29_ ^= i_28_ >>> 16;
	    i_26_ += i_29_;
	    i_28_ += i_27_;
	    i_28_ ^= i_27_ << 10;
	    i += i_28_;
	    i_27_ += i_26_;
	    i_27_ ^= i_26_ >>> 4;
	    i_32_ += i_27_;
	    i_26_ += i;
	    i_26_ ^= i << 8;
	    i_31_ += i_26_;
	    i += i_32_;
	    i ^= i_32_ >>> 9;
	    i_30_ += i;
	    i_32_ += i_31_;
	}
	for (int i_34_ = 0; i_34_ < 256; i_34_ += 8) {
	    i_32_ += rsl[i_34_];
	    i_31_ += rsl[1 + i_34_];
	    i_30_ += rsl[i_34_ + 2];
	    i_29_ += rsl[i_34_ + 3];
	    i_28_ += rsl[i_34_ + 4];
	    i_27_ += rsl[5 + i_34_];
	    i_26_ += rsl[6 + i_34_];
	    i += rsl[7 + i_34_];
	    i_32_ ^= i_31_ << 11;
	    i_29_ += i_32_;
	    i_31_ += i_30_;
	    i_31_ ^= i_30_ >>> 2;
	    i_28_ += i_31_;
	    i_30_ += i_29_;
	    i_30_ ^= i_29_ << 8;
	    i_27_ += i_30_;
	    i_29_ += i_28_;
	    i_29_ ^= i_28_ >>> 16;
	    i_26_ += i_29_;
	    i_28_ += i_27_;
	    i_28_ ^= i_27_ << 10;
	    i += i_28_;
	    i_27_ += i_26_;
	    i_27_ ^= i_26_ >>> 4;
	    i_32_ += i_27_;
	    i_26_ += i;
	    i_26_ ^= i << 8;
	    i_31_ += i_26_;
	    i += i_32_;
	    i ^= i_32_ >>> 9;
	    i_30_ += i;
	    i_32_ += i_31_;
	    mem[i_34_] = i_32_;
	    mem[i_34_ + 1] = i_31_;
	    mem[i_34_ + 2] = i_30_;
	    mem[i_34_ + 3] = i_29_;
	    mem[4 + i_34_] = i_28_;
	    mem[5 + i_34_] = i_27_;
	    mem[6 + i_34_] = i_26_;
	    mem[7 + i_34_] = i;
	}
	for (int i_35_ = 0; i_35_ < 256; i_35_ += 8) {
	    i_32_ += mem[i_35_];
	    i_31_ += mem[i_35_ + 1];
	    i_30_ += mem[i_35_ + 2];
	    i_29_ += mem[3 + i_35_];
	    i_28_ += mem[4 + i_35_];
	    i_27_ += mem[i_35_ + 5];
	    i_26_ += mem[6 + i_35_];
	    i += mem[7 + i_35_];
	    i_32_ ^= i_31_ << 11;
	    i_29_ += i_32_;
	    i_31_ += i_30_;
	    i_31_ ^= i_30_ >>> 2;
	    i_28_ += i_31_;
	    i_30_ += i_29_;
	    i_30_ ^= i_29_ << 8;
	    i_27_ += i_30_;
	    i_29_ += i_28_;
	    i_29_ ^= i_28_ >>> 16;
	    i_26_ += i_29_;
	    i_28_ += i_27_;
	    i_28_ ^= i_27_ << 10;
	    i += i_28_;
	    i_27_ += i_26_;
	    i_27_ ^= i_26_ >>> 4;
	    i_32_ += i_27_;
	    i_26_ += i;
	    i_26_ ^= i << 8;
	    i_31_ += i_26_;
	    i += i_32_;
	    i ^= i_32_ >>> 9;
	    i_30_ += i;
	    i_32_ += i_31_;
	    mem[i_35_] = i_32_;
	    mem[i_35_ + 1] = i_31_;
	    mem[2 + i_35_] = i_30_;
	    mem[i_35_ + 3] = i_29_;
	    mem[i_35_ + 4] = i_28_;
	    mem[i_35_ + 5] = i_27_;
	    mem[6 + i_35_] = i_26_;
	    mem[7 + i_35_] = i;
	}
	isaac((byte) 67);
	count = -1459565312;
    }
    
    public final int method7506(int i) {
		if (-1798378491 * count == 0) {
		    isaac((byte) 12);
		    count = -1459565312;
		}
		if (!RS3Applet.USING_ISAAC) {
			return 0;
		}
		return (rsl[count * -1798378491 - 1]);
    }
    
    static final void method7507(InterfaceComponent class58, InterfaceDefinition class35,
				 ClientScriptData class454, int i) {
	((ClientScriptData) class454).intStackPointer -= -821458770;
	int i_36_ = (((ClientScriptData) class454).integerStack
		     [((ClientScriptData) class454).intStackPointer * 1482319719]);
	int i_37_ = (((ClientScriptData) class454).integerStack
		     [((ClientScriptData) class454).intStackPointer * 1482319719 + 1]);
	ParamType class603
	    = Class621.paramTypeList.list(i_36_, 786763093);
	if (i_37_ != class603.defaultint * 2015998927)
	    class58.method1521(i_36_, i_37_, -448547120);
	else
	    class58.method1523(i_36_, -672686419);
    }
    
    static final void method7508(ClientScriptData class454, byte i) {
	PlayerRights.leaveFriendsChat(943748630);
    }
    
    public static void method7509(int i, int i_38_) {
	if (-1 != i && !Class473.aBoolArray6378[i]) {
	    Class398.aClass210_5791.method4199(i, (byte) -83);
	    Class187.aClass35Array2203[i] = null;
	}
    }
}
